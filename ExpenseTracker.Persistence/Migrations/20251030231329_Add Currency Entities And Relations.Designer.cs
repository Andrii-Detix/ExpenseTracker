// <auto-generated />
using System;
using System.Collections.Generic;
using ExpenseTracker.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpenseTracker.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251030231329_Add Currency Entities And Relations")]
    partial class AddCurrencyEntitiesAndRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpenseTracker.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ExpenseTracker.Domain.Categories.Category.Name#CategoryName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(400)
                                .HasColumnType("character varying(400)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Domain.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ExpenseTracker.Domain.Currencies.Currency.Name#CurrencyName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(400)
                                .HasColumnType("character varying(400)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Domain.ExpenseRecords.ExpenseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "ExpenseTracker.Domain.ExpenseRecords.ExpenseRecord.Amount#ExpenseAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");
                        });

                    b.HasKey("Id")
                        .HasName("pk_expense_records");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("expense_records", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DefaultCurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_currency_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DefaultCurrencyId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Domain.ExpenseRecords.ExpenseRecord", b =>
                {
                    b.HasOne("ExpenseTracker.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Domain.Currencies.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpenseTracker.Domain.Users.User", b =>
                {
                    b.HasOne("ExpenseTracker.Domain.Currencies.Currency", null)
                        .WithMany()
                        .HasForeignKey("DefaultCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ExpenseTracker.Domain.Users.ValueObjects.UserNames.UserName", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(400)
                                .HasColumnType("character varying(400)")
                                .HasColumnName("name");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
